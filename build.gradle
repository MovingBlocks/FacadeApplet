// This facade is for running the game as an applet

// Grab all the common stuff like plugins to use, artifact repositories, code analysis config
apply from: "$rootDir/config/gradle/common.gradle"

import org.apache.tools.ant.filters.FixCrLfFilter;

def LWJGL_VERSION = '2.9.1'
def JINPUT_VERSION = '2.0.5'

// Declare "extra properties" (variables) for the project - a Gradle thing that makes them special.
ext {
    // Project paths
    dirApplet = 'facades/applet'
    subDirLibs = 'libs'
    subDirModules = 'mods'
    destDirApplet = 'distributions/applet'
    destDirModules = "distributions/$subDirModules"
    jarFileName = 'Terasology.jar'
    templatesDir = file('templates')

    // Read environment variables, including variables passed by jenkins continuous integration server
    env = System.getenv()
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Applet
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

configurations {
    applet
}

dependencies {
    compile project(':engine')
    applet group: 'org.lwjgl.lwjgl', name: 'lwjgl_util_applet', version: LWJGL_VERSION
}

jar {
   manifest.mainAttributes("Permissions": "all-permissions")
   manifest.mainAttributes("Codebase": "*")
   manifest.mainAttributes("Application-Name": "Terasology Applet")
   manifest.mainAttributes("Application-Library-Allowable-Codebase": "*")
   manifest.mainAttributes("Caller-Allowable-Codebase": "*")
   manifest.mainAttributes("Trusted-Only": "true")
}

task syncIntoApplet(type:Sync) {
    into("$buildDir/$destDirApplet")
    from ("$rootDir/README.markdown") {
        filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("crlf"))
        rename('README.markdown', 'README')
    }
    from ("$rootDir/LICENSE") {
        filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("crlf"))
    }
    from ("$rootDir/NOTICE") {
        filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("crlf"))
    }
    from jar
    from configurations.applet
    into(subDirLibs) {
        from project(":engine").configurations.runtime
        from rootProject.configurations.natives
    }
    into(subDirModules) {
        from "$buildDir/$destDirModules"
    }
}

task createIndexHtml(type:Copy) {
    mustRunAfter syncIntoApplet
    def jars = []
    from project(":engine").configurations.runtime.each {
        jars += 'lib/' + it.getName()
    }
    def modules = []
    subprojects.each { project ->
        if (project.name != 'mods') {
            modules += project.name + '.jar'
        }
    }
    from(dirApplet)
    into("$buildDir/$destDirApplet")
    include 'index.html'
    expand(lwjglVersion: LWJGL_VERSION, jinputVersion : JINPUT_VERSION, jars : jars.join(", "), modules : modules.join(", "))
}

task distApplet {
    description = "Creates an Applet folder"
    //dependsOn distModules
    dependsOn syncIntoApplet
    dependsOn createIndexHtml
}

// At the end of the applet distribution sign the jar files so they can get expanded rights in a browser
distApplet.doLast {
	if (!(new File("$dirApplet/certum.jks").exists())) {
		throw new GradleException("Before you can run this task, place the certum.jks keystore file in \"$dirApplet\". See the README file on how to create the keystore.");
	}

    file("$buildDir/$destDirApplet").listFiles().each {
        if (it.getName().endsWith(".jar"))
            ant.signjar(jar: it, keystore: "certum.jks", alias: 'cervator', storepass: 'Terasology', tsaurl: 'http://time.certum.pl/')
    }
    file("$buildDir/$destDirApplet/$subDirLibs").listFiles().each {
        if (it.getName().endsWith(".jar"))
            ant.signjar(jar: it, keystore: "certum.jks", alias: 'cervator', storepass: 'Terasology', tsaurl: 'http://time.certum.pl/')
    }
    file("$buildDir/$destDirApplet/$subDirModules").listFiles().each {
        if (it.getName().endsWith(".jar"))
            ant.signjar(jar: it, keystore: "certum.jks", alias: 'cervator', storepass: 'Terasology', tsaurl: 'http://time.certum.pl/')
    }
}

task distAppletZip(type:Zip) {
    description = "Creates an Applet ZIP file from '$buildDir/$destDirApplet'"
    dependsOn distApplet
    //dependsOn createVersionInfoFile
    //dependsOn createVersionFile
    appendix 'Applet'
    from "$buildDir/$destDirApplet"
    //from "$buildDir/$versionFileName"
}
