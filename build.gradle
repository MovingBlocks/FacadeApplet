// This facade is for running the game as an applet

// Grab all the common stuff like plugins to use, artifact repositories, code analysis config
apply from: "$rootDir/config/gradle/common.gradle"

import org.apache.tools.ant.filters.FixCrLfFilter;
import org.apache.tools.ant.taskdefs.condition.IsSigned;

def LWJGL_VERSION = '2.9.1'
def JINPUT_VERSION = '2.0.5'

// Declare "extra properties" (variables) for the project - a Gradle thing that makes them special.
ext {
    // Project paths
    subDirLibs = 'libs'
    subDirModules = 'modules'
    destDirApplet = 'distributions/applet'
    jarFileName = 'Terasology.jar'
    templatesDir = file('templates')

    // Read environment variables, including variables passed by jenkins continuous integration server
    env = System.getenv()
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Applet
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

configurations {
    applet
    modules {
        description = 'Modules without deps'
        transitive = false
    }
}

dependencies {
    compile project(':engine')
    applet (group: 'org.lwjgl.lwjgl', name: 'lwjgl_util_applet', version: LWJGL_VERSION)
    applet (group: 'org.terasology.engine', name: 'engine', version: '+')
    modules (group: 'org.terasology.modules', name: 'Core', version: '+')
}

jar {
   manifest.mainAttributes('Permissions': 'all-permissions')
   manifest.mainAttributes('Codebase': '*')
   manifest.mainAttributes('Application-Name': 'Terasology Applet')
   manifest.mainAttributes('Application-Library-Allowable-Codebase': '*')
   manifest.mainAttributes('Caller-Allowable-Codebase': '*')
   manifest.mainAttributes('Trusted-Only': 'false')
}

task syncIntoApplet(type:Sync) {
    description = "Copies all relevant files to the applet folder"
    
    from ("$rootDir/README.markdown") {
        filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("crlf"))
        rename('README.markdown', 'README')
    }
    from ("$rootDir/LICENSE") {
        filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("crlf"))
    }
    from ("$rootDir/NOTICE") {
        filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("crlf"))
    }
    from jar                              // this is the applet.jar file
    into("$buildDir/$destDirApplet")
    
    into(subDirLibs) {
        from configurations.applet        // these are all applet deps.
    }
    into(subDirModules) {
        from configurations.modules
    }
}

task createIndexHtml(type:Copy) {
    mustRunAfter syncIntoApplet

    // add all libs to classpath
    def jars = []
    configurations.applet.each {
        jars += subDirLibs + '/' + it.getName()
    }
    
    def modules = []
    configurations.modules.each {
        modules += subDirModules + '/' + it.getName()
    }
    
    from('.')
    into("$buildDir/$destDirApplet")
    include 'index.html'
    expand(lwjglVersion: LWJGL_VERSION, jinputVersion : JINPUT_VERSION, jars : jars.join(", "), modules : modules.join(", "))
}

task distApplet {
    description = "Creates an Applet folder"
    //dependsOn distModules
    dependsOn syncIntoApplet
    dependsOn createIndexHtml
}

// At the end of the applet distribution sign the jar files so they can get expanded rights in a browser
distApplet.doLast {

    if (!file('certum.jks').exists()) {
        throw new GradleException("Copy the \"certum.jks\" keystore file in \"$projectDir\" first. See the README file on how to create the keystore.");
    }

    FileTree tree = fileTree(dir: "$buildDir/$destDirApplet")
    
    tree.include '*.jar'
    tree.include "$subDirLibs/*.jar"
    tree.include "$subDirModules/*.jar"
    
    tree.each {
        // TODO: Remove this part as soon as LWJGL applet jars work correctly
        if (it.getName().toLowerCase().startsWith('lwjgl')) {
            logger.lifecycle("Re-signing invalid LWJGL file $it");
            fixBrokenLwjglJar(it);
            sign(it);
        }
        else if (!IsSigned.isSigned(it, null)) {
            logger.lifecycle("Signing $it");
            sign(it);
        } else {
            logger.lifecycle("File $it already signed");
        }
    }
}


def sign(File it) {
    ant.signjar(jar: it, keystore: "certum.jks", alias: 'cervator', storepass: 'Terasology', tsaurl: 'http://time.certum.pl/')
}

// Overwrite invalid AppLibAC attribute ("true") in LWJGL 2.9.1 jars
def fixBrokenLwjglJar(File jar) {
    ant.jar(destfile: jar, update: true) {
        delegate.manifest {
            attribute(name: 'Application-Library-Allowable-Codebase', value: '*')
        }
    }
}



task distAppletZip(type:Zip) {
    description = "Creates an Applet ZIP file from '$buildDir/$destDirApplet'"
    dependsOn distApplet
    //dependsOn createVersionInfoFile
    //dependsOn createVersionFile
    appendix 'Applet'
    from "$buildDir/$destDirApplet"
    //from "$buildDir/$versionFileName"
}
